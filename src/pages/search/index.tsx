import Head from "next/head";
import { useEffect, useState } from "react";
import { getFirestore, doc, getDoc, collection } from "firebase/firestore";
import { getAuth, onAuthStateChanged } from "firebase/auth";
import { Inter } from "next/font/google";
import styles from "./search.module.css";
import { useRouter } from "next/router";

import { Header } from "@/components/Header";
import { Footer } from "@/components/Footer";
import { PostList } from "@/components/Goodlist";
import Link from "next/link";

type Post = {
  id: string;
  title: string;
  height: number;
  width: number;
  html: string;
  css: string;
  author: string;
  authorId: string;
  tags: string[];
};

const inter = Inter({ subsets: ["latin"] });

const db = getFirestore();
const auth = getAuth();

export default function Home() {
  const router = useRouter();
  const { word } = router.query;

  const [works, setWorks] = useState<Post[]>([]);

  useEffect(() => {
    // ユーザーのログイン状態を確認する
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (user) {
        getMyWorksId();
      } else {
        console.log("not logged in");
      }
    });
    return () => unsubscribe(); // cleanup function
  }, [word]);

  useEffect(() => {
    console.log(works);
  }, [works]);

  async function getMyWorksId() {
    // ここでUserFavoritesのデータを取得して表示する
    const user = auth.currentUser;
    const docRef = doc(db, "Tags", `${word}`);

    const docSnapshot = await getDoc(docRef);
    if (docSnapshot.exists()) {
      console.log("Document data:", docSnapshot.data());
      const workIds: string[] = docSnapshot.data()?.workIds;
      fetchWorks(workIds);
    } else {
      console.log("No such document!");
    }
  }

  async function fetchWorks(data: string[]) {
    const worksRef = collection(db, "Works");
    const worksList: Post[] = [];

    // data配列の各要素に対して処理を行う
    for (const name of data) {
      const docRef = doc(worksRef, name);
      const docSnapshot = await getDoc(docRef);

      // ドキュメントが存在する場合、そのデータをworksListに追加する
      if (docSnapshot.exists()) {
        worksList.push(docSnapshot.data() as Post);
      }
    }
    setWorks(worksList);
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main className={`${styles.main} ${inter.className}`}>
        <Link href="/">
          <div>ギャラリーに戻る</div>
        </Link>
        <div>
          <h2>{word}の検索結果</h2>
          <div>
            <PostList Post={works} />
          </div>
        </div>
      </main>
      <Footer />
    </>
  );
}
